@page "/"
@layout LoginLayout
@using GalaxySoftwareCRM.Shared.Models
@using GalaxySoftwareCRM.Client.Services
@inject NavigationManager NavigationManager
@inject IDataService service
@inject AuthService authservice

<div class="container-sm align-self-center" style="max-width:376px">
    <div class="d-flex justify-content-center">
        <p class="h5">
            Customer Management System
        </p>
    </div>
    <div class="d-flex justify-content-center">
        <small class="text-body-secondary">
           Galaxy Software
        </small>
    </div>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-floating mb-3">
                <InputText @bind-Value="model.UserMail" class="form-control" id="floatingInput" placeholder="username@example.com" />
                <label for="floatingInput">User name</label>
                <ValidationMessage For="@(() => model.UserMail)" />
            </div>
            <div class="form-floating">
                <InputText @bind-Value="model.Password" type="password" class="form-control" id="floatingPassword" placeholder="Password" />
                <label for="floatingPassword">Password</label>
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <div>

                <div class="d-flex justify-content-between mt-4">
                    <div class="col-sm">
                        <NavLink href="account/register" class="btn btn-link">Register</NavLink>
                    </div>
                    <div class="d-flex row reverse me-1">
                        <button type="submit" class="btn btn-primary">Sign In <i class="bi bi-box-arrow-in-right"></i></button>
                    </div>

                </div>
            </div>

        </EditForm>
    </div>
</div>


@code
{
    public AuthenticateRequest model = new();

    private bool loading;

    private async void OnValidSubmit()
    {
        AuthenticateResponse authresponse;

        loading = true;

        authresponse = await service.GetUserAuthentication(model);

        if (authresponse.Token != null)
        {
            authservice.CurrentUser = authresponse;
            NavigationManager.NavigateTo("/customerspage");
        }




    }

}
