@page "/customerspage"
@using GalaxySoftwareCRM.Shared
@using GalaxySoftwareCRM.Client.Services
@using GalaxySoftwareCRM.Client.Components 
@using NpgsqlTypes
@inject IDataService service
@inject ActionService actionservice
@inject FilterService filterservice
@inject IDialogService DialogService
@*@inject HttpClient Http*@



<PageTitle>Customer</PageTitle>

@if (customerlist == null)
{
    <div class="d-flex align-items-center flex-column" Style="height:100%;">
        <ProgressRing />
    </div>
}
else
{
    <div>
       <MudTable RowsPerPage=15  Items="@customerlist" Hover="true" Dense=true>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>ShortDesc</MudTh>
            <MudTh>Contact</MudTh>
            <MudTh>PhoneNo</MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>    
        <RowTemplate>
            <MudTd DataLabel="Name">@context.name</MudTd>
            <MudTd DataLabel="ShortDesc">@context.shortdesc</MudTd>
            <MudTd DataLabel="Contact">@context.contact</MudTd>
            <MudTd DataLabel="PhoneNo">@context.phone</MudTd>
            <MudTd Style="width:50px"><MudIconButton OnClick="@(()=>EditCutomerExecute(context))"
                Color="Color.Primary" 
                Icon="@Icons.Material.Filled.ModeEdit" 
                Size="Size.Small"
                aria-label="edit"></MudIconButton></MudTd>
            <MudTd Style="width:50px"><MudIconButton OnClick="@(()=>DeleteCustomerExecute(context))"
                Color="Color.Error" 
                Size="Size.Small"
                Icon="@Icons.Material.Filled.DeleteForever" 
                aria-label="delete"></MudIconButton></MudTd>
        </RowTemplate>
         <PagerContent>
            <MudTablePager  />
        </PagerContent>
        </MudTable>
    </div>
}       
        
       
@code {
    private IEnumerable<Customer>? customerlist;
    private CustomerService? customerservice;

    protected override async Task OnInitializedAsync()
    {
        customerservice = new CustomerService(service);
        actionservice.AddNewAction = AddCustomerExecute;
        actionservice.FilterAction = ShowFilterActionExecute;
        filterservice.RequeryCommand = RequeryByFilterExecute;

        customerlist = await GetData();

    }

    private async void RequeryByFilterExecute()
    {
        customerlist = await GetData(-9,filterservice.SelectedTownshipId, filterservice.SelectedCustomerGroupId);
        StateHasChanged();
    }

    private void ShowFilterActionExecute()
    {
        filterservice.IsTownshipVisible = true;
        filterservice.IsCustomerVisible = true;
        filterservice.IsCustomerGroupVisible = true;

        if(filterservice.FilterVisibilityCommand != null)
        {
            filterservice.FilterVisibilityCommand.Invoke();
        }
    }

    #region Customer Add/Edit/Select
    private async void AddCustomerExecute()
    {
        var options = new DialogOptions() { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Large , NoHeader = true };
        var parameters = new DialogParameters { ["ChildContent"] = typeof(CustomerSetupComponent)};

        var dialogresult =  await DialogService.Show<DialogPopupComponent>("Customer Setup", parameters, options).Result;

     
        if (dialogresult.Canceled == false)
        {
            await GetData();
            StateHasChanged();
        }
    }

    private async void EditCutomerExecute(Customer customer)
    {
        try
        {
            var options = new DialogOptions() { CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Large, NoHeader = true };
            var parameters = new DialogParameters();

            parameters.Add("ChildContent", typeof(CustomerSetupComponent));
            parameters.Add("EditItem", customer);

            var dialogresult = await DialogService.Show<DialogPopupComponent>("Customer Setup", parameters, options).Result;

            if (dialogresult.Canceled == false)
            {
                await GetData();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async void DeleteCustomerExecute(Customer customer)
    {
        DialogOptions dlogoption = new DialogOptions { FullWidth = true};
        var dialogresult = await DialogService.ShowMessageBox(title:"Delete",message:"Are you Sure to delete?",options : dlogoption);


        if(dialogresult == true)
        {
            var deletedcustomer = await DeleteCustomerById(customer.customerid);

            if(deletedcustomer == -1)
            {
                customerlist =  customerlist?.Where(x => x.customerid != customer.customerid).ToList();
                StateHasChanged();
            }
        }


    }

    private async Task<int?> DeleteCustomerById(int? _customerid)
    {
        return await customerservice!.DeleteCustomerById(_customerid);
    }

    private async Task<IEnumerable<Customer>> GetData(int? _customerid =-9,int? _townshipid =-9,int? _custgroupid =-9)
    {
        return await customerservice!.GetCustomerSource(_customerid, _townshipid, _custgroupid);
    }

    #endregion
}
