@using GalaxySoftwareCRM.Shared;
@using GalaxySoftwareCRM.Shared.Models;
@using GalaxySoftwareCRM.Client.Services
@using NpgsqlTypes
@inject IDataService service
@inject IDialogService DialogService
@inject FilterService filterservice


 <div class="flex-column">
    <div class="row h-25 p-2" style="border-radius:5px;background-color:#7A86B6">
     <h3 style="color:white">Customer Setup</h3>
 </div>
 
 <div class="row h-75 mt-4">
 <EditForm   Model="@customer"  OnValidSubmit="OnValidSubmit">
        <div class="d-flex flex-md-column" style="height:400px;overflow-y:auto;overflow-x:hidden">
            <MudGrid>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Label="Customer Name" 
                            @bind-Value="customer.name" For="@(() => customer.name)"/>
                    </MudItem>
                     <MudItem xs="12" sm="6" md="4">
                        <MudTextField Label="Description"  
                            @bind-Value="customer.shortdesc" For="@(() => customer.shortdesc)"/>
                    </MudItem>
                     <MudItem xs="12" sm="6" md="4">
                        <MudTextField Label="Contact" 
                            @bind-Value="customer.contact" For="@(() => customer.contact)"/>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Label="Customer Address" 
                            @bind-Value="customer.address" For="@(() => customer.address)"/>
                    </MudItem>
                     <MudItem xs="12" sm="6" md="4">
                        <MudTextField Label="Company Name" 
                            @bind-Value="customer.companyname" For="@(() => customer.companyname)"/>
                    </MudItem>
                     <MudItem xs="12" sm="6" md="4">
                        <MudTextField Label="PhoneNo" 
                            @bind-Value="customer.phone" For="@(() => customer.phone)"/>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="customer.townshipname" Label="Township"
                                      Variant="Variant.Text" Adornment="Adornment.End"
                                      OnAdornmentClick="@ToggleOpen"
                                      AdornmentIcon="@Icons.Material.Filled.LocationCity" AdornmentColor="Color.Secondary" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect T="Int16?" Label="CustGroup" @bind-Value="customer.custgroupid">
                            @foreach (var customergroup in CustomerGroupSource)
                            {
                                <MudSelectItem T="Int16?" Value="@customergroup?.CustGroupId">
                                 @customergroup?.Name
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <!--For Layout / Dummy Div-->
                    <MudItem xs="12" sm="6" md="4">
                    </MudItem>

                    <MudItem xs="12" sm="6" md="4">
                        <MudCheckBox Label="AllowCredit"
                                     @bind-Value="customer.iscredit" For="@(() => customer.iscredit)" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudCheckBox Label="Inactive"
                                     @bind-Value="customer.isinactive" For="@(() => customer.isinactive)" />
                    </MudItem>

            </MudGrid>
                <MudPopover Open="@_isOpen" Fixed="false" OverflowBehavior="OverflowBehavior.FlipNever"
                            AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter">
                        <TownshipComponent OnCloseExecute="()=> _isOpen = !_isOpen " />
                </MudPopover>
        </div>
        <div class="d-flex flex-md-row m-2" >
                <MudButton ButtonType="ButtonType.Button"
                           OnClick="@(()=> @Cancel())"
                           Variant="Variant.Filled"
                           Color="Color.Default"
                           Class="ml-auto">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Style="margin-left:10px">Confirm
                </MudButton>  
        </div>
  </EditForm>
    </div>
</div>

@code
{
    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }


    public Customer customer { get; set; } = new();

    private CustomerService customerservice;

    public IEnumerable<Township> TownshipSource = new List<Township>();

    public IEnumerable<CustomerGroup> CustomerGroupSource = new List<CustomerGroup>();

    public Int16? SelectedTownshipId { get; set; }

    public bool _isOpen;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    protected override async Task OnInitializedAsync()
    {
        customerservice = new CustomerService(service);

        TownshipSource = await customerservice.GetTownshipSource();

        CustomerGroupSource = await customerservice.GetCustomerGroupSource();

        if (filterservice.EditItem != null)
            customer = (Customer)filterservice.EditItem;

    }


    private async void OnValidSubmit(EditContext context)
    {
        Customer _customer = (context.Model as Customer) ?? new();


        _customer.iscredit = true;
        _customer.isinactive = false;
        _customer.isdeleted = false;
        _customer.isupdated = true;

        _customer.sr = Guid.NewGuid();


        List<Customer> SaveCustomerObject = new List<Customer>();
        SaveCustomerObject.Add(_customer);

        var recordcount = await customerservice.Save(SaveCustomerObject);

        if(recordcount == -1)
        {

            await DialogService.ShowMessageBox("Confirm","Confirm Completed Successfully");
            MudDialog.Close();
        }
    }

    private void Cancel()
    {

        MudDialog.Cancel();
    }
}